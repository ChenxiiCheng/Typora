/* eslint-disable react/no-children-prop */
import type { NextPage } from 'next';
import * as React from 'react';
import Head from 'next/head';
import monaco from 'monaco-editor';
import MonacoEditor from '@monaco-editor/react';
import MarkdownParser from 'react-markdown';

import { useEditorTypeStore } from '../global-stores/useEditorTypeStore';
import { useMonacoEditorOptionsStore } from '../global-stores/useMonacoEditorOptionsStore';
import { useMarkdownContentStore } from '../global-stores/useMarkdownContentStore';

const Home: NextPage = () => {
	const { editorType, setEditorType } = useEditorTypeStore();
	const { setMonacoEditorOptions, ...monacoEditorOptions } =
		useMonacoEditorOptionsStore();
	// const { language, setNewLanguage } = useLanguageStore();
	const { markdownContent, setMarkdownContent } = useMarkdownContentStore();

	function handleTextChange(event: React.ChangeEvent<HTMLTextAreaElement>) {
		setMarkdownContent(event.target.value);
	}

	function handleMonacoEditorChange(
		value: string | undefined,
		event: monaco.editor.IModelContentChangedEvent
	) {
		setMarkdownContent(value ?? '');
	}

	return (
		<div>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className="grid grid-cols-2 grid-rows-flow h-screen">
				{/* Left Side */}
				<div className="p-5">
					{editorType === 'textarea' ? (
						<textarea
							className="w-full h-full focus:outline-none"
							value={markdownContent}
							onChange={handleTextChange}
						/>
					) : (
						<MonacoEditor
							height="100%"
							width="100%"
							language={monacoEditorOptions.language}
							onChange={handleMonacoEditorChange}
							options={{
								cursorStyle: monacoEditorOptions.cursorStyle,
								cursorBlinking: monacoEditorOptions.cursorBlinking,
								minimap: {
									enabled: monacoEditorOptions.minimap,
								},
								lineNumbers: monacoEditorOptions.lineNumbers,
								fontSize: monacoEditorOptions.fontSize,
								folding: monacoEditorOptions.folding,
								lineDecorationsWidth: monacoEditorOptions.lineDecorationsWidth,
								renderLineHighlight: monacoEditorOptions.renderLineHighlight,
								scrollbar: {
									vertical: monacoEditorOptions.verticalScrollbar,
									verticalScrollbarSize:
										monacoEditorOptions.verticalScrollbarSize,
								},
							}}
						/>
					)}
				</div>
				{/* Right Side */}
				<div className="p-5 bg-gray-50 prose prose-slate">
					<MarkdownParser>{markdownContent}</MarkdownParser>
				</div>
			</main>
		</div>
	);
};

export default Home;
